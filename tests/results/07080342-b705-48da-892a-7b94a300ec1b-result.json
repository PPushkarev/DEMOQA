{"name": "test_web_tabl_change_row", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'scrollIntoView')\n  (Session info: chrome=126.0.6478.63)\nStacktrace:\n\tGetHandleVerifier [0x00007FF791F51F52+60322]\n\t(No symbol) [0x00007FF791ECCEC9]\n\t(No symbol) [0x00007FF791D87EBA]\n\t(No symbol) [0x00007FF791D8DCEE]\n\t(No symbol) [0x00007FF791D90968]\n\t(No symbol) [0x00007FF791E1C95B]\n\t(No symbol) [0x00007FF791DFC21A]\n\t(No symbol) [0x00007FF791E1BC80]\n\t(No symbol) [0x00007FF791DFBFC3]\n\t(No symbol) [0x00007FF791DC9617]\n\t(No symbol) [0x00007FF791DCA211]\n\tGetHandleVerifier [0x00007FF7922694AD+3301629]\n\tGetHandleVerifier [0x00007FF7922B36D3+3605283]\n\tGetHandleVerifier [0x00007FF7922A9450+3563680]\n\tGetHandleVerifier [0x00007FF792004326+790390]\n\t(No symbol) [0x00007FF791ED750F]\n\t(No symbol) [0x00007FF791ED3404]\n\t(No symbol) [0x00007FF791ED3592]\n\t(No symbol) [0x00007FF791EC2F9F]\n\tBaseThreadInitThunk [0x00007FFED6DF7344+20]\n\tRtlUserThreadStart [0x00007FFED767CC91+33]", "trace": "self = <tests.test_elements.TestElements.TestWebTable object at 0x00000213A341D790>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"916d2aae2b3c4594b36061e942a58bde\")>\n\n    def test_web_tabl_change_row(self, driver):\n        web_table_page = WebTablePage(driver, \"https://demoqa.com/webtables\")\n        web_table_page.open()\n>       count = web_table_page.select_up_to_some_rows()\n\ntest_elements.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\element_page.py:173: in select_up_to_some_rows\n    self.go_to_element(count_row_button)\n..\\pages\\base_page.py:43: in go_to_element\n    self.driver.execute_script (\"arguments[0].scrollIntoView();\", element)\nC:\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\nC:\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000213A3A94C50>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Cannot read properties of ...07FF791EC2F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFED6DF7344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFED767CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Cannot read properties of null (reading 'scrollIntoView')\nE         (Session info: chrome=126.0.6478.63)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF791F51F52+60322]\nE       \t(No symbol) [0x00007FF791ECCEC9]\nE       \t(No symbol) [0x00007FF791D87EBA]\nE       \t(No symbol) [0x00007FF791D8DCEE]\nE       \t(No symbol) [0x00007FF791D90968]\nE       \t(No symbol) [0x00007FF791E1C95B]\nE       \t(No symbol) [0x00007FF791DFC21A]\nE       \t(No symbol) [0x00007FF791E1BC80]\nE       \t(No symbol) [0x00007FF791DFBFC3]\nE       \t(No symbol) [0x00007FF791DC9617]\nE       \t(No symbol) [0x00007FF791DCA211]\nE       \tGetHandleVerifier [0x00007FF7922694AD+3301629]\nE       \tGetHandleVerifier [0x00007FF7922B36D3+3605283]\nE       \tGetHandleVerifier [0x00007FF7922A9450+3563680]\nE       \tGetHandleVerifier [0x00007FF792004326+790390]\nE       \t(No symbol) [0x00007FF791ED750F]\nE       \t(No symbol) [0x00007FF791ED3404]\nE       \t(No symbol) [0x00007FF791ED3592]\nE       \t(No symbol) [0x00007FF791EC2F9F]\nE       \tBaseThreadInitThunk [0x00007FFED6DF7344+20]\nE       \tRtlUserThreadStart [0x00007FFED767CC91+33]\n\nC:\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException"}, "attachments": [{"name": "log", "source": "a5a0fb3a-cbdf-4f35-9477-0fcb34f7848a-attachment.txt", "type": "text/plain"}], "start": 1718811206272, "stop": 1718811232606, "uuid": "d045afd0-ebb5-478b-8e98-b6df5a4dd6f9", "historyId": "e365ee18ff4d03b3ebc146d0d2c23c8f", "testCaseId": "e365ee18ff4d03b3ebc146d0d2c23c8f", "fullName": "test_elements.TestWebTable#test_web_tabl_change_row", "labels": [{"name": "suite", "value": "test_elements"}, {"name": "subSuite", "value": "TestElements"}, {"name": "host", "value": "LAPTOP-NIP335DE"}, {"name": "thread", "value": "6012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_elements"}]}